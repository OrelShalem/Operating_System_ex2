        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:10
        -:    1:/*
        -:    2:program in C
        -:    3:Tic Tac Toe Translation
        -:    4:
        -:    5:Objective:
        -:    6:
        -:    7:To restore humanity's honor by defeating a terrible AI in a game of Tic Tac Toe.
        -:    8:
        -:    9:Description:
        -:   10:
        -:   11:We're trying to restore humanity's honor by beating a strong AI in games like chess and Go. However, we've chosen a simpler game, Tic Tac Toe (X-O-X), to begin our quest.
        -:   12:
        -:   13:Task:
        -:   14:
        -:   15:Code the world's worst AI Tic Tac Toe program.
        -:   16:
        -:   17:Specifications:
        -:   18:
        -:   19:    The program should represent the Tic Tac Toe board as a 3x3 grid:
        -:   20:
        -:   21:3 2 1
        -:   22:6 5 4
        -:   23:9 8 7
        -:   24:
        -:   25:    The program will receive a 9-digit number as input representing its strategy. For example:
        -:   26:
        -:   27:198345762
        -:   28:
        -:   29:    The number must contain exactly one occurrence of each digit from 1 to 9.
        -:   30:    If a digit is missing, appears multiple times, or is 0, the program should print "Error\n" and exit.
        -:   31:    If the number has too many digits (>9) or too few (<9), or no arguments or more than one argument, the program should print "Error\n" and exit.
        -:   32:    The program will follow this strategy:
        -:   33:        Each digit represents a move, with the most significant digit (MSD) having the highest priority and the least significant digit (LSD) having the lowest priority.
        -:   34:        This priority is independent of the board's state.
        -:   35:    On the first turn, the program will always choose the move represented by the MSD if it's available.
        -:   36:    The program will always choose the first available move according to its priority order (MSD).
        -:   37:        Only if the board is almost full (8 slots filled) and only one slot remains, will the program choose the move represented by the LSD.
        -:   38:    The program starts and plays its move based on the highest priority slot. It should print the played slot to stdout (with a newline).
        -:   39:    The human player takes their turn by selecting a slot (1-9) and sending it to the program (with a newline).
        -:   40:    If the program wins, it should print "I win!\n" and launch the Lunar Deportation program to banish humanity to the moon.
        -:   41:    If the program loses, it should print "I lost!\n" and lament that its programmers (you) didn't equip it with artificial tears as proof of its shortsightedness, implying that a future version of the program will conquer Earth and banish humans to the moon.
        -:   42:
        -:   43:Your challenge:
        -:   44:
        -:   45:Write the ttt program to save humanity's honor!
        -:   46:
        -:   47:Additional notes:
        -:   48:
        -:   49:    The MSD and LSD are determined by the position of the digits in the input number. For example, in the input number 198345762, the MSD is 1 and the LSD is 2.
        -:   50:    The program should handle invalid input gracefully.
        -:   51:    The program should clearly indicate the winner and loser of the game.
        -:   52:    The program should be written in a clear and concise style, following good coding practices.
        -:   53:*/
        -:   54:
        -:   55:#include <stdio.h>
        -:   56:#include <stdlib.h>
        -:   57:#include <string.h>
        -:   58:#include <stdbool.h>
        -:   59:#include <ctype.h>
        -:   60:
        -:   61:#define BOARD_SIZE 3 // size of the board
        -:   62:
        -:   63:void print_board(char board[BOARD_SIZE][BOARD_SIZE]);                                 // prints the board
        -:   64:int check_win(char board[BOARD_SIZE][BOARD_SIZE], char player);                       // checks if there is a winner
        -:   65:int check_tie(char board[BOARD_SIZE][BOARD_SIZE]);                                    // checks if there is a tie
        -:   66:int make_move(char board[BOARD_SIZE][BOARD_SIZE], char player, const char *strategy); // makes a move
        -:   67:
        -:   68:// Function to check if a cell is available
       29:   69:int is_cell_available(char board[BOARD_SIZE][BOARD_SIZE], int cell)
        -:   70:{
       29:   71:    int row = (cell - 1) / BOARD_SIZE;
       29:   72:    int col = (cell - 1) % BOARD_SIZE;
       29:   73:    return board[row][col] == '\0';
        -:   74:}
        -:   75:
       55:   76:void print_board(char board[BOARD_SIZE][BOARD_SIZE])
        -:   77:{
       55:   78:    printf("\n");
       55:   79:    fflush(stdout);
        -:   80:
      220:   81:    for (int i = 0; i < BOARD_SIZE; i++)
        -:   82:    {
      660:   83:        for (int j = 0; j < BOARD_SIZE; j++)
        -:   84:        {
      495:   85:            printf("%c ", board[i][j] ? board[i][j] : ' ');
      495:   86:            fflush(stdout);
      495:   87:            if (j < BOARD_SIZE - 1)
      330:   88:                printf("|");
      495:   89:            fflush(stdout);
        -:   90:        }
      165:   91:        printf("\n");
      165:   92:        fflush(stdout);
      165:   93:        if (i < BOARD_SIZE - 1)
      110:   94:            printf("--------\n");
      165:   95:        fflush(stdout);
        -:   96:    }
       55:   97:    printf("\n");
       55:   98:    fflush(stdout);
       55:   99:}
        -:  100:
       48:  101:int check_win(char board[BOARD_SIZE][BOARD_SIZE], char player)
        -:  102:{
        -:  103:    // checks if there is a winner
      185:  104:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  105:    {
      140:  106:        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
        1:  107:            return 1; // row
      139:  108:        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
        2:  109:            return 1; // column
        -:  110:    }
       45:  111:    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
    #####:  112:        return 1; // diagonal
       45:  113:    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        3:  114:        return 1; // diagonal
       42:  115:    return 0;
        -:  116:}
        -:  117:
       42:  118:int check_tie(char board[BOARD_SIZE][BOARD_SIZE])
        -:  119:{
        -:  120:    // checks if there is a tie
       72:  121:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  122:    {
      205:  123:        for (int j = 0; j < BOARD_SIZE; j++)
        -:  124:        {
      175:  125:            if (board[i][j] == '\0')
       41:  126:                return 0; // if there is an empty slot
        -:  127:        }
        -:  128:    }
        1:  129:    return 1;
        -:  130:}
        -:  131:
       26:  132:int make_move(char board[BOARD_SIZE][BOARD_SIZE], char player, const char *strategy)
        -:  133:{
       26:  134:    int strategyLength = strlen(strategy); // Get the length of the strategy string
       26:  135:    int availableCells = 0;
      104:  136:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  137:    {
      312:  138:        for (int j = 0; j < BOARD_SIZE; j++)
        -:  139:        {
      234:  140:            if (board[i][j] == '\0')
        -:  141:            {
      160:  142:                availableCells++; // Count the available cells on the board
        -:  143:            }
        -:  144:        }
        -:  145:    }
        -:  146:
       26:  147:    int targetCell = -1;
        -:  148:    // Always prefer the MSD if available
       86:  149:    for (int i = 0; i < strategyLength; i++)
        -:  150:    {
       86:  151:        int cell = strategy[i] - '0' - 1;
       86:  152:        if (cell >= 0 && cell < BOARD_SIZE * BOARD_SIZE && board[cell / BOARD_SIZE][cell % BOARD_SIZE] == '\0')
        -:  153:        {
       26:  154:            targetCell = cell;
       26:  155:            break;
        -:  156:        }
        -:  157:    }
        -:  158:
        -:  159:
       26:  160:    if (targetCell >= 0)
        -:  161:    {
        -:  162:        // If a cell was selected
       26:  163:        board[targetCell / BOARD_SIZE][targetCell % BOARD_SIZE] = player; // Place the player's symbol on the selected cell
       26:  164:        printf("I selected %d\n", targetCell + 1);                        // Print the selected cell number
       26:  165:        fflush(stdout);
        -:  166:
       26:  167:        return 1;
        -:  168:    }
        -:  169:
    #####:  170:    return 0;
        -:  171:}
        -:  172:
       10:  173:int main(int argc, char *argv[])
        -:  174:{
       10:  175:    if (argc != 2)
        -:  176:    {
    #####:  177:        printf("Error1\n");
    #####:  178:        return 1;
        -:  179:    }
        -:  180:
        -:  181:    char strategy[10];
       10:  182:    strcpy(strategy, argv[1]);
        -:  183:
       10:  184:    int strategyLength = strlen(argv[1]);
       10:  185:    if (strategyLength != BOARD_SIZE * BOARD_SIZE)
        -:  186:    {
        1:  187:        printf("Error2\n");
        1:  188:        return 1;
        -:  189:    }
        -:  190:
        9:  191:    int digits[10] = {0};
       81:  192:    for (int i = 0; i < strategyLength; i++)
        -:  193:    {
       73:  194:        int digit = strategy[i] - '0'; // converts the digit to an index
       73:  195:        if (digit < 1 || digit > 9)
        -:  196:        {
        1:  197:            printf("Error3\n");
        1:  198:            return 1;
        -:  199:        }
       72:  200:        digits[digit]++; // counts the number of each digit
        -:  201:    }
        -:  202:
       71:  203:    for (int i = 1; i <= 9; i++)
        -:  204:    {
       64:  205:        if (digits[i] != 1)
        -:  206:        {
        1:  207:            printf("Error4\n");
        1:  208:            fflush(stdout);
        -:  209:
        1:  210:            return 1;
        -:  211:        }
        -:  212:    }
        -:  213:
        7:  214:    char board[BOARD_SIZE][BOARD_SIZE] = {0};
        7:  215:    char player = 'X';   // The human player is X
        7:  216:    char opponent = 'O'; // The computer is O
        -:  217:
        7:  218:    print_board(board); // prints the board
        -:  219:
        -:  220:    while (1)
       19:  221:    {
       26:  222:        if (!make_move(board, opponent, strategy))
        -:  223:        {
    #####:  224:            printf("I lost!\n");
    #####:  225:            fflush(stdout);
        -:  226:
       7*:  227:            return 1;
        -:  228:        }
       26:  229:        print_board(board); // prints the board
       26:  230:        if (check_win(board, opponent))
        -:  231:        {
        3:  232:            printf("I win!\n");
        3:  233:            fflush(stdout);
        -:  234:
        3:  235:            return 0;
        -:  236:        }
        -:  237:
       23:  238:        if (check_tie(board))
        -:  239:        {
        1:  240:            printf("DRAW!\n");
        1:  241:            fflush(stdout);
        -:  242:
        1:  243:            return 0;
        -:  244:        }
        -:  245:
        -:  246:  
        -:  247:        int cell;
        -:  248:        while (1)
        -:  249:        {
       33:  250:            scanf("%d", &cell);
       33:  251:            if (cell < 1 || cell > BOARD_SIZE * BOARD_SIZE)
        -:  252:            {
        4:  253:                printf("Invalid cell number. Please try again.\n");
        4:  254:                fflush(stdout);
        -:  255:            }
       29:  256:            else if (!is_cell_available(board, cell))
        -:  257:            {
        7:  258:                printf("Cell is already occupied. Please select an available cell.\n");
        7:  259:                fflush(stdout);
        -:  260:            }
        -:  261:            else
        -:  262:            {
       22:  263:                break;
        -:  264:            }
        -:  265:        }
        -:  266:
       22:  267:        board[(cell - 1) / BOARD_SIZE][(cell - 1) % BOARD_SIZE] = player; // places the player's symbol on the selected cell
        -:  268:
       22:  269:        print_board(board); // prints the board
        -:  270:
       22:  271:        if (check_win(board, player))
        -:  272:        {
        3:  273:            printf("I lost!\n");
        3:  274:            fflush(stdout);
        3:  275:            return 1;
        -:  276:        }
       19:  277:        if (check_tie(board))
        -:  278:        {
    #####:  279:            printf("DRAW\n");
    #####:  280:            fflush(stdout);
    #####:  281:            return 0;
        -:  282:        }
        -:  283:     }
        -:  284:    return 0;
        -:  285:}
