        -:    0:Source:ttt.c
        -:    1:/*
        -:    2:program in C
        -:    3:Tic Tac Toe Translation
        -:    4:
        -:    5:Objective:
        -:    6:
        -:    7:To restore humanity's honor by defeating a terrible AI in a game of Tic Tac Toe.
        -:    8:
        -:    9:Description:
        -:   10:
        -:   11:We're trying to restore humanity's honor by beating a strong AI in games like chess and Go. However, we've chosen a simpler game, Tic Tac Toe (X-O-X), to begin our quest.
        -:   12:
        -:   13:Task:
        -:   14:
        -:   15:Code the world's worst AI Tic Tac Toe program.
        -:   16:
        -:   17:Specifications:
        -:   18:
        -:   19:    The program should represent the Tic Tac Toe board as a 3x3 grid:
        -:   20:
        -:   21:3 2 1
        -:   22:6 5 4
        -:   23:9 8 7
        -:   24:
        -:   25:    The program will receive a 9-digit number as input representing its strategy. For example:
        -:   26:
        -:   27:198345762
        -:   28:
        -:   29:    The number must contain exactly one occurrence of each digit from 1 to 9.
        -:   30:    If a digit is missing, appears multiple times, or is 0, the program should print "Error\n" and exit.
        -:   31:    If the number has too many digits (>9) or too few (<9), or no arguments or more than one argument, the program should print "Error\n" and exit.
        -:   32:    The program will follow this strategy:
        -:   33:        Each digit represents a move, with the most significant digit (MSD) having the highest priority and the least significant digit (LSD) having the lowest priority.
        -:   34:        This priority is independent of the board's state.
        -:   35:    On the first turn, the program will always choose the move represented by the MSD if it's available.
        -:   36:    The program will always choose the first available move according to its priority order (MSD).
        -:   37:        Only if the board is almost full (8 slots filled) and only one slot remains, will the program choose the move represented by the LSD.
        -:   38:    The program starts and plays its move based on the highest priority slot. It should print the played slot to stdout (with a newline).
        -:   39:    The human player takes their turn by selecting a slot (1-9) and sending it to the program (with a newline).
        -:   40:    If the program wins, it should print "I win!\n" and launch the Lunar Deportation program to banish humanity to the moon.
        -:   41:    If the program loses, it should print "I lost!\n" and lament that its programmers (you) didn't equip it with artificial tears as proof of its shortsightedness, implying that a future version of the program will conquer Earth and banish humans to the moon.
        -:   42:
        -:   43:Your challenge:
        -:   44:
        -:   45:Write the ttt program to save humanity's honor!
        -:   46:
        -:   47:Additional notes:
        -:   48:
        -:   49:    The MSD and LSD are determined by the position of the digits in the input number. For example, in the input number 198345762, the MSD is 1 and the LSD is 2.
        -:   50:    The program should handle invalid input gracefully.
        -:   51:    The program should clearly indicate the winner and loser of the game.
        -:   52:    The program should be written in a clear and concise style, following good coding practices.
        -:   53:*/
        -:   54:
        -:   55:#include <stdio.h>
        -:   56:#include <stdlib.h>
        -:   57:#include <string.h>
        -:   58:#include <stdbool.h>
        -:   59:#include <ctype.h>
        -:   60:
        -:   61:#define BOARD_SIZE 3 // size of the board
        -:   62:
        -:   63:void print_board(char board[BOARD_SIZE][BOARD_SIZE]);                                 // prints the board
        -:   64:int check_win(char board[BOARD_SIZE][BOARD_SIZE], char player);                       // checks if there is a winner
        -:   65:int check_tie(char board[BOARD_SIZE][BOARD_SIZE]);                                    // checks if there is a tie
        -:   66:int make_move(char board[BOARD_SIZE][BOARD_SIZE], char player, const char *strategy); // makes a move
        -:   67:
        -:   68:// Function to check if a cell is available
       30:   69:int is_cell_available(char board[BOARD_SIZE][BOARD_SIZE], int cell)
        -:   70:{
       30:   71:    int row = (cell - 1) / BOARD_SIZE;
       30:   72:    int col = (cell - 1) % BOARD_SIZE;
       30:   73:    return board[row][col] == '\0';
        -:   74:}
        -:   75:
       71:   76:void print_board(char board[BOARD_SIZE][BOARD_SIZE])
        -:   77:{
       71:   78:    printf("\n");
       71:   79:    fflush(stdout);
        -:   80:
      284:   81:    for (int i = 0; i < BOARD_SIZE; i++)
        -:   82:    {
      852:   83:        for (int j = 0; j < BOARD_SIZE; j++)
        -:   84:        {
      639:   85:            printf("%c ", board[i][j] ? board[i][j] : ' ');
      639:   86:            fflush(stdout);
      639:   87:            if (j < BOARD_SIZE - 1)
      426:   88:                printf("|");
      639:   89:            fflush(stdout);
        -:   90:        }
      213:   91:        printf("\n");
      213:   92:        fflush(stdout);
      213:   93:        if (i < BOARD_SIZE - 1)
      142:   94:            printf("--------\n");
      213:   95:        fflush(stdout);
        -:   96:    }
       71:   97:    printf("\n");
       71:   98:    fflush(stdout);
       71:   99:}
        -:  100:
       61:  101:int check_win(char board[BOARD_SIZE][BOARD_SIZE], char player)
        -:  102:{
        -:  103:    // checks if there is a winner
      223:  104:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  105:    {
     172*:  106:        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
    #####:  107:            return 1; // row
      172:  108:        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
       10:  109:            return 1; // column
        -:  110:    }
      51*:  111:    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
    #####:  112:        return 1; // diagonal
      51*:  113:    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
    #####:  114:        return 1; // diagonal
       51:  115:    return 0;
        -:  116:}
        -:  117:
       51:  118:int check_tie(char board[BOARD_SIZE][BOARD_SIZE])
        -:  119:{
        -:  120:    // checks if there is a tie
       83:  121:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  122:    {
      229:  123:        for (int j = 0; j < BOARD_SIZE; j++)
        -:  124:        {
      197:  125:            if (board[i][j] == '\0')
       51:  126:                return 0; // if there is an empty slot
        -:  127:        }
        -:  128:    }
    #####:  129:    return 1;
        -:  130:}
        -:  131:
       31:  132:int make_move(char board[BOARD_SIZE][BOARD_SIZE], char player, const char *strategy)
        -:  133:{
       31:  134:    int strategyLength = strlen(strategy); // Get the length of the strategy string
       31:  135:    int availableCells = 0;
      124:  136:    for (int i = 0; i < BOARD_SIZE; i++)
        -:  137:    {
      372:  138:        for (int j = 0; j < BOARD_SIZE; j++)
        -:  139:        {
      279:  140:            if (board[i][j] == '\0')
        -:  141:            {
      213:  142:                availableCells++; // Count the available cells on the board
        -:  143:            }
        -:  144:        }
        -:  145:    }
        -:  146:
       31:  147:    int targetCell = -1;
        -:  148:    // Always prefer the MSD if available
       87:  149:    for (int i = 0; i < strategyLength; i++)
        -:  150:    {
       87:  151:        int cell = strategy[i] - '0' - 1;
       87:  152:        if (cell >= 0 && cell < BOARD_SIZE * BOARD_SIZE && board[cell / BOARD_SIZE][cell % BOARD_SIZE] == '\0')
        -:  153:        {
       31:  154:            targetCell = cell;
       31:  155:            break;
        -:  156:        }
        -:  157:    }
        -:  158:
        -:  159:    // If the MSD is not available, check if only one cell remains
       31:  160:    if (targetCell == -1)
        -:  161:    {
    #####:  162:        int availableCount = 0;
    #####:  163:        for (int i = 0; i < BOARD_SIZE * BOARD_SIZE; i++)
        -:  164:        {
    #####:  165:            if (board[i / BOARD_SIZE][i % BOARD_SIZE] == '\0')
        -:  166:            {
    #####:  167:                targetCell = i;
    #####:  168:                availableCount++;
        -:  169:            }
        -:  170:        }
        -:  171:        // If only one cell remains, choose it (LSD)
    #####:  172:        if (availableCount == 1)
        -:  173:        {
        -:  174:            // The program will choose the remaining available cell
        -:  175:        }
        -:  176:        else
        -:  177:        {
        -:  178:            // If more than one cell remains, revert to MSD strategy
    #####:  179:            targetCell = -1;
        -:  180:        }
        -:  181:    }
        -:  182:
       31:  183:    if (targetCell >= 0)
        -:  184:    {
        -:  185:        // If a cell was selected
       31:  186:        board[targetCell / BOARD_SIZE][targetCell % BOARD_SIZE] = player; // Place the player's symbol on the selected cell
       31:  187:        printf("I selected %d\n", targetCell + 1);                        // Print the selected cell number
       31:  188:        fflush(stdout);
        -:  189:
       31:  190:        return 1;
        -:  191:    }
        -:  192:
    #####:  193:    return 0;
        -:  194:}
        -:  195:
       10:  196:int main(int argc, char *argv[])
        -:  197:{
       10:  198:    if (argc != 2)
        -:  199:    {
    #####:  200:        printf("Error1\n");
    #####:  201:        return 1;
        -:  202:    }
        -:  203:
        -:  204:    char strategy[10];
       10:  205:    strcpy(strategy, argv[1]);
        -:  206:
       10:  207:    int strategyLength = strlen(argv[1]);
       10:  208:    if (strategyLength != BOARD_SIZE * BOARD_SIZE)
        -:  209:    {
    #####:  210:        printf("Error2\n");
    #####:  211:        return 1;
        -:  212:    }
        -:  213:
       10:  214:    int digits[10] = {0};
      100:  215:    for (int i = 0; i < strategyLength; i++)
        -:  216:    {
       90:  217:        int digit = strategy[i] - '0'; // converts the digit to an index
       90:  218:        if (digit < 1 || digit > 9)
        -:  219:        {
    #####:  220:            printf("Error3\n");
    #####:  221:            return 1;
        -:  222:        }
       90:  223:        digits[digit]++; // counts the number of each digit
        -:  224:    }
        -:  225:
      100:  226:    for (int i = 1; i <= 9; i++)
        -:  227:    {
       90:  228:        if (digits[i] != 1)
        -:  229:        {
    #####:  230:            printf("Error4\n");
    #####:  231:            fflush(stdout);
        -:  232:
    #####:  233:            return 1;
        -:  234:        }
        -:  235:    }
        -:  236:
       10:  237:    char board[BOARD_SIZE][BOARD_SIZE] = {0};
       10:  238:    char player = 'X';   // The human player is X
       10:  239:    char opponent = 'O'; // The computer is O
        -:  240:
       10:  241:    print_board(board); // prints the board
        -:  242:
        -:  243:    while (1)
       21:  244:    {
       31:  245:        if (!make_move(board, opponent, strategy))
        -:  246:        {
    #####:  247:            printf("I lost!\n");
    #####:  248:            fflush(stdout);
        -:  249:
      10*:  250:            return 1;
        -:  251:        }
       31:  252:        print_board(board); // prints the board
       31:  253:        if (check_win(board, opponent))
        -:  254:        {
        1:  255:            printf("I win!\n");
        1:  256:            fflush(stdout);
        -:  257:
        1:  258:            return 0;
        -:  259:        }
        -:  260:
       30:  261:        if (check_tie(board))
        -:  262:        {
    #####:  263:            printf("DRAW!\n");
    #####:  264:            fflush(stdout);
        -:  265:
    #####:  266:            return 0;
        -:  267:        }
        -:  268:
        -:  269:  
        -:  270:        int cell;
        -:  271:        while (1)
        -:  272:        {
       30:  273:            scanf("%d", &cell);
       30:  274:            if (cell < 1 || cell > BOARD_SIZE * BOARD_SIZE)
        -:  275:            {
    #####:  276:                printf("Invalid cell number. Please try again.\n");
    #####:  277:                fflush(stdout);
        -:  278:            }
       30:  279:            else if (!is_cell_available(board, cell))
        -:  280:            {
    #####:  281:                printf("Cell is already occupied. Please select an available cell.\n");
    #####:  282:                fflush(stdout);
        -:  283:            }
        -:  284:            else
        -:  285:            {
       30:  286:                break;
        -:  287:            }
        -:  288:        }
        -:  289:
       30:  290:        board[(cell - 1) / BOARD_SIZE][(cell - 1) % BOARD_SIZE] = player; // places the player's symbol on the selected cell
        -:  291:
       30:  292:        print_board(board); // prints the board
        -:  293:
       30:  294:        if (check_win(board, player))
        -:  295:        {
        9:  296:            printf("I lost!\n");
        9:  297:            fflush(stdout);
        9:  298:            return 1;
        -:  299:        }
       21:  300:        if (check_tie(board))
        -:  301:        {
    #####:  302:            printf("DRAW\n");
    #####:  303:            fflush(stdout);
    #####:  304:            return 0;
        -:  305:        }
        -:  306:     }
        -:  307:    return 0;
        -:  308:}
